name: CI/CD - Build & Deploy to Cloud Run

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load env from secrets
        shell: bash
        run: |
          # Base values from repo secrets
          echo "PROJECT_NUMBER=${{ secrets.PROJECT_NUMBER }}" >> "$GITHUB_ENV"
          echo "PROJECT_ID=${{ secrets.PROJECT_ID }}"         >> "$GITHUB_ENV"
          echo "REGION=${{ secrets.REGION }}"                 >> "$GITHUB_ENV"
          echo "SERVICE_NAME=${{ secrets.SERVICE_NAME }}"     >> "$GITHUB_ENV"
          echo "REPO_ID=${{ secrets.REPO_ID }}"               >> "$GITHUB_ENV"
          echo "DEPLOYER_SA=${{ secrets.DEPLOYER_SA }}"       >> "$GITHUB_ENV"
          echo "TF_VERSION=${{ secrets.TF_VERSION }}"         >> "$GITHUB_ENV"

          # Derived values
          echo "WIF_PROVIDER=projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider" >> "$GITHUB_ENV"
          echo "IMAGE_TAG=v${GITHUB_RUN_NUMBER}" >> "$GITHUB_ENV"
          echo "IMAGE_URI=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_ID }}/${{ secrets.SERVICE_NAME }}:v${GITHUB_RUN_NUMBER}" >> "$GITHUB_ENV"

      # Auth to GCP with WIF (no keys)
      - name: Google Auth (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.DEPLOYER_SA }}

      # Configure Docker for Artifact Registry
      - name: Configure Docker for AR
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Build & push container (linux/amd64 to match Cloud Run)
      - name: Build & Push Image
        run: |
          docker buildx build --platform linux/amd64 -t "${IMAGE_URI}" .
          docker push "${IMAGE_URI}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Import pre-existing AR repo (idempotent)
        working-directory: ./terraform
        run: |
          set -euo pipefail
          REPO_PATH="projects/${PROJECT_ID}/locations/${REGION}/repositories/${REPO_ID}"
          # Import if not already in state; ignore if it is
          terraform state show google_artifact_registry_repository.repo >/dev/null 2>&1 || \
            terraform import google_artifact_registry_repository.repo "${REPO_PATH}" || true

      - name: Terraform Apply
        working-directory: ./terraform
        shell: bash
        run: |
          set -euo pipefail
          terraform apply -auto-approve \
            -var="project_id=${PROJECT_ID}" \
            -var="region=${REGION}" \
            -var="service_name=${SERVICE_NAME}" \
            -var="repo_id=${REPO_ID}" \
            -var="image_tag=${IMAGE_TAG}" \
            -var="allow_unauthenticated=true" \
            -var="github_repository=${{ github.repository }}"
          # NOTE: no impersonate var here in CI (WIF creds are used directly)

      - name: Capture Terraform Outputs
        id: tf-outputs
        working-directory: ./terraform
        run: |
          echo "cloud_run_uri=$(terraform output -raw cloud_run_uri)" >> "$GITHUB_OUTPUT"
          echo "image_url=$(terraform output -raw image_url)" >> "$GITHUB_OUTPUT"

      - name: Print Deployment Info
        run: |
          echo "Deployed to: ${{ steps.tf-outputs.outputs.cloud_run_uri }}"
          echo "Image used: ${{ steps.tf-outputs.outputs.image_url }}"
